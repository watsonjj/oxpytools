#!python

from astropy.utils.compat import argparse
from astropy import log
from astropy.io import fits
from astropy.table import Table, Column

from oxpytools.io.files import InputFile
from oxpytools.plotting.event import EventPlotter

from matplotlib import pyplot as plt
from matplotlib import animation

import numpy as np
from tqdm import tqdm
import os


def main():
    parser = argparse.ArgumentParser(description='Create a gif of an event')
    parser.add_argument('-f', '--file', dest='input_path', action='store',
                        required=True, help='path to the input file')
    parser.add_argument('-o', '--output', dest='output_path', action='store',
                        required=True, help='path of the output fits file')
    parser.add_argument('-S', '--scheme', dest='scheme', action='store',
                        default=0,
                        help='which scheme should be used to extract the '
                             'charge e.g.:'
                             '\n - 0 = true charge')

    logger_detail = parser.add_mutually_exclusive_group()
    logger_detail.add_argument('-q', '--quiet', dest='quiet',
                               action='store_true', default=False,
                               help='Quiet mode')
    logger_detail.add_argument('-v', '--verbose', dest='verbose',
                               action='store_true', default=False,
                               help='Verbose mode')
    logger_detail.add_argument('-d', '--debug', dest='debug',
                               action='store_true', default=False,
                               help='Debug mode')

    args = parser.parse_args()

    if args.quiet:
        log.setLevel(40)
    if args.verbose:
        log.setLevel(20)
    if args.debug:
        log.setLevel(10)

    log.info("[SCRIPT] write_img_fits")

    log.debug("[file] Reading file")
    input_file = InputFile(args.input_path)
    source = input_file.read()

    table = Table(names=('event_index', 'event_id', 'telescope', 'energy', 'img'),
              dtype=('i4', 'i4', 'i4', 'f8', '2048f8'))

    with tqdm(total=1, desc="Extracting events from file") as pbar:
        for event in source:
            event_index = event.count
            event_id = event.dl0.event_id
            energy = event.mc.energy

            if event_index > 10: break

            for tel in event.dl0.tel:
                img = event.mc.tel[tel].photo_electrons
                table.add_row((event_index, event_id, tel, energy, img))
                pbar.update(1)

    if not os.path.exists(os.path.dirname(args.output_path)):
        log.info("[output] Creating directory: {}".format(
            os.path.dirname(args.output_path)))
        os.makedirs(os.path.dirname(args.output_path))
    if os.path.exists(args.output_path):
        os.remove(args.output_path)
    table.write(args.output_path)
    log.info("[output] {}".format(args.output_path))

    log.info("[COMPLETE]")

if __name__ == '__main__':
    main()