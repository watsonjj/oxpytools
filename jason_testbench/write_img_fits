#!python

from astropy.utils.compat import argparse
from astropy import log
from astropy.table import Table

from targetpipe.io.files import CHECInputFile as InputFile

from tqdm import tqdm
import os

from ctapipe.calib.camera.calibrators import calibration_arguments


def main():
    parser = argparse.ArgumentParser(description='Create a gif of an event')
    parser.add_argument('-f', '--file', dest='input_path', action='store',
                        required=True, help='path to the input file')
    parser.add_argument('-o', '--output', dest='output_path', action='store',
                        required=True, help='path of the output fits file')

    logger_detail = parser.add_mutually_exclusive_group()
    logger_detail.add_argument('-q', '--quiet', dest='quiet',
                               action='store_true', default=False,
                               help='Quiet mode')
    logger_detail.add_argument('-v', '--verbose', dest='verbose',
                               action='store_true', default=False,
                               help='Verbose mode')
    logger_detail.add_argument('-d', '--debug', dest='debug',
                               action='store_true', default=False,
                               help='Debug mode')

    args = parser.parse_args()

    if args.quiet:
        log.setLevel(40)
    if args.verbose:
        log.setLevel(20)
    if args.debug:
        log.setLevel(10)

    log.info("[SCRIPT] write_img_fits")

    log.debug("[file] Reading file")
    input_file = InputFile(args.input_path)
    source = input_file.read()

    table = Table(names=('event_index', 'event_id', 'telescope', 'energy',
                         'altitude', 'azimuth', 'core_x', 'core_y',
                         'height_first_interaction', 'img'),
                  dtype=('i4', 'i4', 'i4', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8',
                         '2048f8'))

    with tqdm(total=1, desc="Extracting events from file") as pbar:
        for event in source:
            event_index = event.count
            event_id = event.dl0.event_id
            energy = event.mc.energy
            altitude = event.mc.alt
            azimuth = event.mc.az
            core_x = event.mc.core_x
            core_y = event.mc.core_y
            height_first_interaction = event.mc.h_first_int

            for tel in event.dl0.tel:
                img = event.mc.tel[tel].photo_electrons
                table.add_row((event_index, event_id, tel, energy, altitude,
                               azimuth, core_x, core_y,
                               height_first_interaction, img))
                pbar.update(1)

    if not os.path.exists(os.path.dirname(args.output_path)):
        log.info("[output] Creating directory: {}".format(
            os.path.dirname(args.output_path)))
        os.makedirs(os.path.dirname(args.output_path))
    if os.path.exists(args.output_path):
        log.info("[output] Replacing file")
        os.remove(args.output_path)
    table.write(args.output_path)
    log.info("[output] {}".format(args.output_path))

    log.info("[COMPLETE]")

if __name__ == '__main__':
    main()